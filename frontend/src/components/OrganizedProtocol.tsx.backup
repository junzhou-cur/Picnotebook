'use client';

import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  FileText,
  Plus,
  Search,
  Filter,
  Download,
  Share2,
  Edit3,
  Trash2,
  Clock,
  CheckCircle,
  AlertCircle,
  ChevronRight,
  Calendar,
  User,
  Tag,
  Folder,
  Copy,
  ExternalLink,
  BookOpen,
  X
} from 'lucide-react';

interface Protocol {
  id: string;
  title: string;
  description: string;
  category: 'Cell Culture' | 'Molecular Biology' | 'Protein Analysis' | 'NGS' | 'General';
  tags: string[];
  status: 'draft' | 'active' | 'archived';
  version: string;
  author: string;
  created_at: string;
  updated_at: string;
  steps: ProtocolStep[];
  materials: string[];
  safety_notes?: string;
  estimated_time: string;
}

interface ProtocolStep {
  id: number;
  title: string;
  description: string;
  duration?: string;
  critical?: boolean;
  notes?: string;
  day?: number;
  stage?: string;
}

interface ProtocolFormData {
  title: string;
  description: string;
  category: 'Cell Culture' | 'Molecular Biology' | 'Protein Analysis' | 'NGS' | 'General';
  tags: string[];
  materials: string[];
  safety_notes: string;
  estimated_time: string;
  steps: ProtocolStep[];
}

export function OrganizedProtocol() {
  const [protocols, setProtocols] = useState<Protocol[]>([]);
  const [selectedProtocol, setSelectedProtocol] = useState<Protocol | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [editingProtocol, setEditingProtocol] = useState<Protocol | null>(null);
  const [showShareModal, setShowShareModal] = useState(false);
  const [shareProtocol, setShareProtocol] = useState<Protocol | null>(null);
  const [loading, setLoading] = useState(true);
  const [formData, setFormData] = useState<ProtocolFormData>({
    title: '',
    description: '',
    category: 'General',
    tags: [],
    materials: [''],
    safety_notes: '',
    estimated_time: '',
    steps: [{ id: 1, title: '', description: '', duration: '', critical: false, notes: '', day: 1, stage: 'Day 1' }]
  });
  const [newTag, setNewTag] = useState('');
  const [isCreating, setIsCreating] = useState(false);
  const [inputMode, setInputMode] = useState<'form' | 'text'>('form');
  const [protocolText, setProtocolText] = useState('');

  // Mock data for demonstration
  useEffect(() => {
    const mockProtocols: Protocol[] = [
      {
        id: '1',
        title: 'CRISPR Gene Editing Protocol',
        description: 'Standard protocol for CRISPR-Cas9 gene editing in mammalian cells',
        category: 'Molecular Biology',
        tags: ['CRISPR', 'Gene Editing', 'Transfection'],
        status: 'active',
        version: '2.1',
        author: 'Dr. Sarah Chen',
        created_at: '2025-07-15',
        updated_at: '2025-08-10',
        estimated_time: '72 hours',
        materials: ['Cas9 protein', 'sgRNA', 'Transfection reagent', 'Culture medium'],
        steps: [
          {
            id: 1,
            title: 'Design sgRNA',
            description: 'Design and order sgRNA targeting your gene of interest',
            duration: '2 hours',
            critical: true,
            day: 1,
            stage: 'Day 1 - Preparation'
          },
          {
            id: 2,
            title: 'Prepare cells',
            description: 'Seed cells at 70% confluency 24h before transfection',
            duration: '30 minutes',
            day: 1,
            stage: 'Day 1 - Preparation'
          },
          {
            id: 3,
            title: 'Transfection',
            description: 'Transfect cells with Cas9 and sgRNA using lipofectamine',
            duration: '1 hour',
            critical: true,
            day: 2,
            stage: 'Day 2 - Transfection'
          },
          {
            id: 4,
            title: 'Medium change',
            description: 'Replace medium 6 hours after transfection',
            duration: '15 minutes',
            day: 2,
            stage: 'Day 2 - Transfection'
          },
          {
            id: 5,
            title: 'Selection',
            description: 'Add antibiotic selection medium',
            duration: '10 minutes',
            day: 3,
            stage: 'Day 3 - Selection'
          },
          {
            id: 6,
            title: 'Analysis',
            description: 'Harvest cells and analyze editing efficiency by sequencing',
            duration: '3 hours',
            day: 5,
            stage: 'Day 5 - Analysis'
          }
        ],
        safety_notes: 'Work in BSL-2 facility. Use appropriate PPE.'
      },
      {
        id: '2',
        title: 'Western Blot Protocol',
        description: 'Protein detection and quantification using Western blot',
        category: 'Protein Analysis',
        tags: ['Western Blot', 'Protein', 'Antibody'],
        status: 'active',
        version: '1.5',
        author: 'Dr. Mike Johnson',
        created_at: '2025-06-20',
        updated_at: '2025-08-05',
        estimated_time: '8 hours',
        materials: ['SDS-PAGE gel', 'Transfer buffer', 'Primary antibody', 'Secondary antibody'],
        steps: [
          {
            id: 1,
            title: 'Sample preparation',
            description: 'Prepare protein samples with loading buffer',
            duration: '30 minutes',
            day: 1,
            stage: 'Day 1 - Sample Prep'
          },
          {
            id: 2,
            title: 'Run SDS-PAGE',
            description: 'Load samples and run gel electrophoresis',
            duration: '90 minutes',
            day: 1,
            stage: 'Day 1 - Sample Prep'
          },
          {
            id: 3,
            title: 'Transfer',
            description: 'Transfer proteins to PVDF membrane',
            duration: '60 minutes',
            critical: true,
            day: 1,
            stage: 'Day 1 - Sample Prep'
          },
          {
            id: 4,
            title: 'Blocking',
            description: 'Block membrane overnight in 5% milk solution',
            duration: '12 hours',
            day: 1,
            stage: 'Day 1 - Sample Prep'
          },
          {
            id: 5,
            title: 'Primary antibody',
            description: 'Incubate with primary antibody',
            duration: '2 hours',
            day: 2,
            stage: 'Day 2 - Detection'
          },
          {
            id: 6,
            title: 'Secondary antibody',
            description: 'Incubate with HRP-conjugated secondary antibody',
            duration: '1 hour',
            day: 2,
            stage: 'Day 2 - Detection'
          },
          {
            id: 7,
            title: 'Development',
            description: 'Develop blot using chemiluminescent substrate',
            duration: '30 minutes',
            day: 2,
            stage: 'Day 2 - Detection'
          }
        ]
      },
      {
        id: '3',
        title: 'Cell Culture Maintenance',
        description: 'Standard protocol for maintaining adherent cell lines',
        category: 'Cell Culture',
        tags: ['Cell Culture', 'Maintenance', 'Passaging'],
        status: 'active',
        version: '3.0',
        author: 'Lab Manager',
        created_at: '2025-05-10',
        updated_at: '2025-08-12',
        estimated_time: '45 minutes',
        materials: ['Culture medium', 'Trypsin', 'PBS', 'Culture flasks'],
        steps: [
          {
            id: 1,
            title: 'Check confluence',
            description: 'Observe cells under microscope to assess confluence',
            duration: '5 minutes',
            day: 1,
            stage: 'Every 2-3 Days'
          },
          {
            id: 2,
            title: 'Remove media',
            description: 'Aspirate old culture medium completely',
            duration: '2 minutes',
            day: 1,
            stage: 'Every 2-3 Days'
          },
          {
            id: 3,
            title: 'Wash cells',
            description: 'Wash with PBS twice to remove debris',
            duration: '5 minutes',
            day: 1,
            stage: 'Every 2-3 Days'
          },
          {
            id: 4,
            title: 'Trypsinize',
            description: 'Add trypsin and incubate until cells detach',
            duration: '5 minutes',
            day: 1,
            stage: 'Every 2-3 Days'
          },
          {
            id: 5,
            title: 'Neutralize and split',
            description: 'Add complete medium and split cells 1:3 into new flasks',
            duration: '10 minutes',
            day: 1,
            stage: 'Every 2-3 Days'
          }
        ]
      }
    ];
    
    setTimeout(() => {
      setProtocols(mockProtocols);
      setLoading(false);
    }, 1000);
  }, []);

  const filteredProtocols = protocols.filter(protocol => {
    const matchesSearch = protocol.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                          protocol.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
                          protocol.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));
    const matchesCategory = selectedCategory === 'all' || protocol.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  const categories = ['all', 'Cell Culture', 'Molecular Biology', 'Protein Analysis', 'NGS', 'General'];

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'Cell Culture': return 'bg-blue-100 text-blue-700';
      case 'Molecular Biology': return 'bg-green-100 text-green-700';
      case 'Protein Analysis': return 'bg-purple-100 text-purple-700';
      case 'NGS': return 'bg-orange-100 text-orange-700';
      default: return 'bg-gray-100 text-gray-700';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'active': return <CheckCircle className="w-4 h-4 text-green-600" />;
      case 'draft': return <Clock className="w-4 h-4 text-yellow-600" />;
      case 'archived': return <AlertCircle className="w-4 h-4 text-gray-600" />;
      default: return null;
    }
  };

  const handleEditProtocol = (protocol: Protocol, event?: React.MouseEvent) => {
    if (event) {
      event.stopPropagation();
    }
    setEditingProtocol(protocol);
    setFormData({
      title: protocol.title,
      description: protocol.description,
      category: protocol.category,
      tags: [...protocol.tags],
      materials: [...protocol.materials],
      safety_notes: protocol.safety_notes || '',
      estimated_time: protocol.estimated_time,
      steps: [...protocol.steps]
    });
    setIsCreating(false);
    setShowEditModal(true);
  };

  const handleCreateProtocol = () => {
    setFormData({
      title: '',
      description: '',
      category: 'General',
      tags: [],
      materials: [''],
      safety_notes: '',
      estimated_time: '',
      steps: [{ id: 1, title: '', description: '', duration: '', critical: false, notes: '', day: 1, stage: 'Day 1' }]
    });
    setProtocolText('');
    setInputMode('form');
    setEditingProtocol(null);
    setIsCreating(true);
    setShowCreateModal(true);
  };

  const handleSaveProtocol = () => {
    if (!formData.title.trim()) {
      alert('Please enter a protocol title');
      return;
    }

    if (formData.steps.some(step => !step.title.trim() || !step.description.trim())) {
      alert('Please fill in all step titles and descriptions');
      return;
    }

    const now = new Date().toISOString().split('T')[0];
    
    if (isCreating) {
      // Create new protocol
      const newProtocol: Protocol = {
        id: `protocol_${Date.now()}`,
        title: formData.title,
        description: formData.description,
        category: formData.category,
        tags: formData.tags,
        status: 'draft',
        version: '1.0',
        author: 'Current User',
        created_at: now,
        updated_at: now,
        steps: formData.steps,
        materials: formData.materials.filter(m => m.trim()),
        safety_notes: formData.safety_notes,
        estimated_time: formData.estimated_time
      };
      
      setProtocols(prev => [newProtocol, ...prev]);
      setShowCreateModal(false);
      alert('Protocol created successfully!');
    } else if (editingProtocol) {
      // Update existing protocol
      const updatedProtocol: Protocol = {
        ...editingProtocol,
        title: formData.title,
        description: formData.description,
        category: formData.category,
        tags: formData.tags,
        steps: formData.steps,
        materials: formData.materials.filter(m => m.trim()),
        safety_notes: formData.safety_notes,
        estimated_time: formData.estimated_time,
        updated_at: now,
        version: `${parseFloat(editingProtocol.version) + 0.1}`.slice(0, 3)
      };
      
      setProtocols(prev => prev.map(p => p.id === editingProtocol.id ? updatedProtocol : p));
      setShowEditModal(false);
      alert('Protocol updated successfully!');
    }
    
    // Reset form
    setFormData({
      title: '',
      description: '',
      category: 'General',
      tags: [],
      materials: [''],
      safety_notes: '',
      estimated_time: '',
      steps: [{ id: 1, title: '', description: '', duration: '', critical: false, notes: '', day: 1, stage: 'Day 1' }]
    });
  };

  const addStep = () => {
    const lastStep = formData.steps[formData.steps.length - 1];
    const newDay = lastStep?.day || 1;
    const newStep: ProtocolStep = {
      id: formData.steps.length + 1,
      title: '',
      description: '',
      duration: '',
      critical: false,
      notes: '',
      day: newDay,
      stage: `Day ${newDay}`
    };
    setFormData(prev => ({ ...prev, steps: [...prev.steps, newStep] }));
  };

  const removeStep = (stepId: number) => {
    if (formData.steps.length > 1) {
      setFormData(prev => ({ 
        ...prev, 
        steps: prev.steps.filter(s => s.id !== stepId).map((s, i) => ({ ...s, id: i + 1 }))
      }));
    }
  };

  const updateStep = (stepId: number, field: keyof ProtocolStep, value: any) => {
    setFormData(prev => ({
      ...prev,
      steps: prev.steps.map(s => s.id === stepId ? { ...s, [field]: value } : s)
    }));
  };

  const addMaterial = () => {
    setFormData(prev => ({ ...prev, materials: [...prev.materials, ''] }));
  };

  const removeMaterial = (index: number) => {
    if (formData.materials.length > 1) {
      setFormData(prev => ({ 
        ...prev, 
        materials: prev.materials.filter((_, i) => i !== index)
      }));
    }
  };

  const updateMaterial = (index: number, value: string) => {
    setFormData(prev => ({
      ...prev,
      materials: prev.materials.map((m, i) => i === index ? value : m)
    }));
  };

  const addTag = () => {
    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {
      setFormData(prev => ({ ...prev, tags: [...prev.tags, newTag.trim()] }));
      setNewTag('');
    }
  };

  const removeTag = (tag: string) => {
    setFormData(prev => ({ ...prev, tags: prev.tags.filter(t => t !== tag) }));
  };

  const parseProtocolText = (text: string): ProtocolFormData => {
    // Initialize results
    let title = '';
    let description = '';
    let category: 'Cell Culture' | 'Molecular Biology' | 'Protein Analysis' | 'NGS' | 'General' = 'General';
    let tags: string[] = [];
    let materials: string[] = [];
    let safety_notes = '';
    let estimated_time = '';
    let steps: ProtocolStep[] = [];

    // Clean and prepare text
    const cleanText = text.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
    const lines = cleanText.split('\n').map(line => line.trim()).filter(line => line.length > 0);
    const fullText = text.toLowerCase();

    // INTELLIGENT TITLE EXTRACTION
    // Look for titles in various formats and positions
    const extractTitle = () => {
      // Pattern 1: Explicit title markers
      const titlePatterns = [
        /(?:title|protocol|procedure|method|assay):\s*(.+)/i,
        /^(.+)\s+protocol$/i,
        /^(.+)\s+procedure$/i,
        /^(.+)\s+method$/i,
        /^protocol\s+for\s+(.+)/i
      ];

      for (const line of lines.slice(0, 5)) { // Check first 5 lines
        for (const pattern of titlePatterns) {
          const match = line.match(pattern);
          if (match) {
            return match[1].trim();
          }
        }
      }

      // Pattern 2: First line if it looks like a title (capitalized, not too long, no periods)
      if (lines.length > 0) {
        const firstLine = lines[0];
        if (firstLine.length < 100 && 
            firstLine.charAt(0) === firstLine.charAt(0).toUpperCase() &&
            !firstLine.includes('.') && 
            !firstLine.includes(':') &&
            !firstLine.match(/^\d+/)) {
          return firstLine;
        }
      }

      // Pattern 3: Look for capitalized sentences that might be titles
      for (const line of lines.slice(0, 3)) {
        if (line.length < 80 && 
            line.charAt(0) === line.charAt(0).toUpperCase() &&
            line.split(' ').length < 10 &&
            !line.includes('.')) {
          return line;
        }
      }

      return 'Extracted Protocol';
    };

    // INTELLIGENT CATEGORY DETECTION
    const detectCategory = () => {
      const categoryKeywords = {
        'Cell Culture': ['cell', 'culture', 'passage', 'subculture', 'plate', 'flask', 'incubator', 'co2', 'medium', 'serum', 'trypsin', 'confluent'],
        'Molecular Biology': ['dna', 'rna', 'pcr', 'primer', 'amplification', 'crispr', 'plasmid', 'transformation', 'transfection', 'gel', 'electrophoresis', 'sequencing', 'cloning', 'enzyme', 'restriction', 'ligation'],
        'Protein Analysis': ['protein', 'western', 'blot', 'antibody', 'sds-page', 'elisa', 'immunofluorescence', 'bradford', 'bca', 'purification', 'chromatography', 'dialysis'],
        'NGS': ['sequencing', 'ngs', 'fastq', 'illumina', 'reads', 'mapping', 'assembly', 'variant', 'genome', 'exome', 'rna-seq', 'chip-seq']
      };

      const scores: { [key: string]: number } = {};
      
      for (const [cat, keywords] of Object.entries(categoryKeywords)) {
        scores[cat] = 0;
        for (const keyword of keywords) {
          const regex = new RegExp(`\\b${keyword}\\b`, 'gi');
          const matches = fullText.match(regex);
          if (matches) {
            scores[cat] += matches.length;
          }
        }
      }

      const maxScore = Math.max(...Object.values(scores));
      if (maxScore > 0) {
        return Object.keys(scores).find(cat => scores[cat] === maxScore) as any || 'General';
      }
      return 'General';
    };

    // INTELLIGENT MATERIALS EXTRACTION
    const extractMaterials = () => {
      const materials: string[] = [];
      const materialKeywords = ['reagent', 'buffer', 'solution', 'kit', 'antibody', 'primer', 'enzyme', 'medium', 'serum', 'chemical', 'equipment'];
      
      // Look for explicit material sections
      let inMaterialSection = false;
      const materialSectionPatterns = /(?:materials?|reagents?|equipment|supplies|chemicals?|buffers?|solutions?):/i;
      
      for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        const lowerLine = line.toLowerCase();
        
        // Check if we're entering a materials section
        if (materialSectionPatterns.test(line)) {
          inMaterialSection = true;
          const afterColon = line.split(':').slice(1).join(':').trim();
          if (afterColon) materials.push(afterColon);
          continue;
        }
        
        // Check if we're leaving the materials section
        if (inMaterialSection && (
          /(?:steps?|procedure|method|protocol|preparation|safety):/i.test(line) ||
          (line.match(/^\d+\./) && !line.match(/^\d+\.?\s*\w+\s*(?:buffer|solution|kit|μl|ml|mg|μg)/i))
        )) {
          inMaterialSection = false;
        }
        
        // Extract materials from the current line
        if (inMaterialSection || materialKeywords.some(keyword => lowerLine.includes(keyword))) {
          // Remove list markers and extract material
          let material = line.replace(/^[-•*\d+\.)\s]+/, '').trim();
          
          // Skip headers and empty lines
          if (material && !materialSectionPatterns.test(material) && material.length > 2) {
            materials.push(material);
          }
        }
      }

      // Also look for specific material patterns throughout the text
      const materialPatterns = [
        /(\d+(?:\.\d+)?\s*(?:μl|ul|ml|l|μg|ug|mg|g|mm|μm|um|nm)\s+(?:of\s+)?[\w\s\-]+(?:buffer|solution|reagent|antibody|enzyme|kit))/gi,
        /([\w\s\-]+(?:buffer|solution|reagent|antibody|enzyme|kit)(?:\s+\([^)]+\))?)/gi
      ];

      for (const pattern of materialPatterns) {
        const matches = text.match(pattern);
        if (matches) {
          materials.push(...matches.filter(m => m.length > 5));
        }
      }

      return [...new Set(materials)].slice(0, 10); // Remove duplicates and limit
    };

    // INTELLIGENT STEPS EXTRACTION WITH DAY DETECTION
    const extractSteps = () => {
      const steps: ProtocolStep[] = [];
      let stepCounter = 0;
      let currentDay = 1;
      let currentStage = 'Day 1';
      
      // Patterns for steps
      const stepPatterns = [
        /^(\d+)[\.\)\:\s]+(.+)/,  // 1. Step text
        /^step\s*(\d+)[:\.\s]+(.+)/i,  // Step 1: text
        /^[-•*]\s*(.+)/,  // Bullet points
        /^([a-z])\.\s+(.+)/i  // a. Step text
      ];

      // Patterns for day detection
      const dayPatterns = [
        /day\s*(\d+)/i,
        /(\d+)\s*(?:st|nd|rd|th)?\s*day/i,
        /week\s*(\d+)/i,
        /time\s*point\s*(\d+)/i
      ];

      let inStepsSection = false;
      const stepSectionPatterns = /(?:steps?|procedure|method|protocol|preparation):/i;

      // First pass: detect explicit day markers and time references
      for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        const lowerLine = line.toLowerCase();
        
        // Check for explicit day markers
        for (const dayPattern of dayPatterns) {
          const dayMatch = lowerLine.match(dayPattern);
          if (dayMatch) {
            const dayNum = parseInt(dayMatch[1]);
            if (dayNum && dayNum !== currentDay) {
              currentDay = dayNum;
              if (lowerLine.includes('week')) {
                currentStage = `Week ${dayNum}`;
              } else {
                // Infer stage purpose from context
                if (lowerLine.includes('prep') || lowerLine.includes('setup') || lowerLine.includes('seed')) {
                  currentStage = `Day ${dayNum} - Preparation`;
                } else if (lowerLine.includes('transfect') || lowerLine.includes('treat') || lowerLine.includes('add')) {
                  currentStage = `Day ${dayNum} - Treatment`;
                } else if (lowerLine.includes('harvest') || lowerLine.includes('collect') || lowerLine.includes('analyze') || lowerLine.includes('measure')) {
                  currentStage = `Day ${dayNum} - Analysis`;
                } else if (lowerLine.includes('wash') || lowerLine.includes('change') || lowerLine.includes('maintain')) {
                  currentStage = `Day ${dayNum} - Maintenance`;
                } else {
                  currentStage = `Day ${dayNum}`;
                }
              }
            }
            break;
          }
        }
        
        // Check if we're entering a steps section
        if (stepSectionPatterns.test(line)) {
          inStepsSection = true;
          continue;
        }

        // Try to identify steps
        let stepMatch = null;
        let stepText = '';
        
        for (const pattern of stepPatterns) {
          stepMatch = line.match(pattern);
          if (stepMatch) {
            stepText = stepMatch[stepMatch.length - 1].trim(); // Last capture group
            break;
          }
        }

        // Also consider lines that start with action verbs as potential steps
        const actionVerbs = ['add', 'mix', 'incubate', 'centrifuge', 'wash', 'transfer', 'pipette', 'vortex', 'heat', 'cool', 'prepare', 'dissolve', 'resuspend', 'pellet', 'seed', 'harvest', 'collect', 'treat', 'transfect'];
        if (!stepMatch && actionVerbs.some(verb => line.toLowerCase().startsWith(verb))) {
          stepText = line;
          stepMatch = [line];
        }

        if (stepMatch && stepText) {
          stepCounter++;
          
          // Extract duration and infer day transitions
          let duration = '';
          const durationMatch = stepText.match(/\(([^)]*(?:min|hour|hr|sec|day|°c|celsius)[^)]*)\)/i);
          if (durationMatch) {
            duration = durationMatch[1];
            stepText = stepText.replace(durationMatch[0], '').trim();
            
            // If duration is overnight or multiple days, infer day transition
            if (duration.toLowerCase().includes('overnight') || 
                duration.toLowerCase().includes('24') || 
                duration.toLowerCase().includes('day')) {
              // This step likely starts on current day but next step is next day
            }
          }

          // Detect critical steps
          const critical = /(?:critical|important|careful|essential|crucial|warning|note|attention)/i.test(stepText);

          // Infer day transition from step content
          const stepLower = stepText.toLowerCase();
          if (stepLower.includes('overnight') || 
              stepLower.includes('24') ||
              stepLower.includes('next day') ||
              stepLower.includes('following day')) {
            // Next step should be on next day
            currentDay++;
            currentStage = `Day ${currentDay}`;
          } else if (stepLower.includes('harvest') || 
                     stepLower.includes('analyze') || 
                     stepLower.includes('collect') ||
                     stepLower.includes('measure')) {
            if (!currentStage.includes('Analysis')) {
              currentStage = `Day ${currentDay} - Analysis`;
            }
          } else if (stepLower.includes('seed') || 
                     stepLower.includes('prepare') || 
                     stepLower.includes('setup')) {
            if (!currentStage.includes('Preparation')) {
              currentStage = `Day ${currentDay} - Preparation`;
            }
          } else if (stepLower.includes('transfect') || 
                     stepLower.includes('treat') || 
                     stepLower.includes('add drug') ||
                     stepLower.includes('stimulate')) {
            if (!currentStage.includes('Treatment')) {
              currentStage = `Day ${currentDay} - Treatment`;
            }
          }

          // Generate title from description
          let stepTitle = stepText;
          if (stepTitle.length > 50) {
            stepTitle = stepTitle.substring(0, 47) + '...';
          }

          steps.push({
            id: stepCounter,
            title: stepTitle,
            description: stepText,
            duration,
            critical,
            notes: '',
            day: currentDay,
            stage: currentStage
          });
        }
      }

      // If no clear steps found, try to extract sentences that sound like instructions
      if (steps.length === 0) {
        const sentences = text.split(/[.!?]+/).map(s => s.trim()).filter(s => s.length > 10);
        
        for (const sentence of sentences) {
          const actionVerbs = ['add', 'mix', 'incubate', 'centrifuge', 'wash', 'transfer', 'pipette', 'vortex', 'heat', 'cool', 'prepare'];
          if (actionVerbs.some(verb => sentence.toLowerCase().includes(verb)) && stepCounter < 10) {
            stepCounter++;
            steps.push({
              id: stepCounter,
              title: sentence.length > 50 ? sentence.substring(0, 47) + '...' : sentence,
              description: sentence,
              duration: '',
              critical: false,
              notes: '',
              day: currentDay,
              stage: currentStage
            });
          }
        }
      }

      return steps;
    };

    // EXTRACT TIME/DURATION
    const extractTime = () => {
      const timePatterns = [
        /(?:time|duration|takes?):\s*([^.]+)/i,
        /(?:total|estimated|approximate)?\s*(?:time|duration):\s*([^.]+)/i,
        /(?:protocol|procedure|method)\s+takes?\s+(?:about|approximately)?\s*([^.]+)/i
      ];

      for (const pattern of timePatterns) {
        const match = text.match(pattern);
        if (match) {
          return match[1].trim();
        }
      }

      // Look for time mentions throughout the text
      const timeWords = text.match(/\d+\s*(?:min|hour|hr|day)s?/gi);
      if (timeWords) {
        return timeWords.slice(-1)[0]; // Return the last time mention
      }

      return '';
    };

    // EXTRACT SAFETY INFORMATION
    const extractSafety = () => {
      const safetyPatterns = [
        /(?:safety|warning|caution|note|attention|danger):\s*([^.]+(?:\.[^.]*)*)/i,
        /(?:wear|use)\s+(?:proper\s+)?(?:ppe|gloves|goggles|lab coat)/i,
        /(?:work\s+in|under)\s+(?:fume\s+hood|hood|bsl|sterile)/i
      ];

      const safetyTexts: string[] = [];
      
      for (const pattern of safetyPatterns) {
        const match = text.match(pattern);
        if (match) {
          safetyTexts.push(match[0]);
        }
      }

      return safetyTexts.join('. ');
    };

    // EXTRACT DESCRIPTION
    const extractDescription = () => {
      const descPatterns = [
        /(?:description|overview|summary|purpose|objective):\s*([^.]+(?:\.[^.]*)*)/i,
        /(?:this\s+(?:protocol|method|procedure))\s+(?:is\s+used\s+)?(?:for|to)\s+([^.]+)/i
      ];

      for (const pattern of descPatterns) {
        const match = text.match(pattern);
        if (match) {
          return match[1].trim();
        }
      }

      // If no explicit description, try to extract the first explanatory sentence
      const sentences = text.split(/[.!?]+/).map(s => s.trim());
      for (const sentence of sentences.slice(0, 5)) {
        if (sentence.length > 20 && sentence.length < 200 && 
            (sentence.toLowerCase().includes('protocol') || 
             sentence.toLowerCase().includes('method') ||
             sentence.toLowerCase().includes('procedure'))) {
          return sentence;
        }
      }

      return '';
    };

    // AUTO-GENERATE TAGS
    const generateTags = () => {
      const allWords = fullText.match(/\b\w{4,}\b/g) || [];
      const scientificTerms = [
        'pcr', 'dna', 'rna', 'protein', 'cell', 'culture', 'western', 'blot', 'elisa', 
        'crispr', 'sequencing', 'buffer', 'incubation', 'centrifuge', 'antibody', 'enzyme',
        'transfection', 'transformation', 'purification', 'extraction', 'amplification',
        'electrophoresis', 'chromatography', 'immunofluorescence', 'microscopy'
      ];
      
      const foundTerms = scientificTerms.filter(term => 
        allWords.some(word => word.toLowerCase() === term)
      );

      // Also extract capitalized words that might be reagent names
      const reagentNames = allWords.filter(word => 
        word.charAt(0) === word.charAt(0).toUpperCase() && 
        word.length > 3 && 
        !['The', 'This', 'That', 'With', 'From', 'Step'].includes(word)
      ).slice(0, 3);

      return [...foundTerms, ...reagentNames.map(r => r.toLowerCase())].slice(0, 8);
    };

    // EXECUTE ALL EXTRACTION FUNCTIONS
    title = extractTitle();
    description = extractDescription();
    category = detectCategory();
    materials = extractMaterials();
    safety_notes = extractSafety();
    estimated_time = extractTime();
    steps = extractSteps();
    tags = generateTags();

    // ENSURE MINIMUM REQUIREMENTS
    if (materials.length === 0) {
      materials = [''];
    }

    if (steps.length === 0) {
      steps.push({
        id: 1,
        title: 'Protocol step (extracted from text)',
        description: 'Please review and edit the automatically extracted step information',
        duration: '',
        critical: false,
        notes: '',
        day: 1,
        stage: 'Day 1'
      });
    }

    return {
      title,
      description,
      category,
      tags,
      materials,
      safety_notes,
      estimated_time,
      steps
    };
  };

  const handleTextImport = () => {
    if (!protocolText.trim()) {
      alert('Please enter protocol text to import');
      return;
    }
    
    const parsedData = parseProtocolText(protocolText);
    setFormData(parsedData);
    setInputMode('form');
    alert('Protocol text has been parsed and organized! You can now review and edit the structured format.');
  };

  const handleShareProtocol = (protocol: Protocol, event?: React.MouseEvent) => {
    if (event) {
      event.stopPropagation();
    }
    setShareProtocol(protocol);
    setShowShareModal(true);
  };

  const handleDuplicateProtocol = (protocol: Protocol, event: React.MouseEvent) => {
    event.stopPropagation();
    const duplicatedProtocol: Protocol = {
      ...protocol,
      id: `${protocol.id}_copy_${Date.now()}`,
      title: `${protocol.title} (Copy)`,
      version: '1.0',
      status: 'draft',
      created_at: new Date().toISOString().split('T')[0],
      updated_at: new Date().toISOString().split('T')[0]
    };
    setProtocols(prev => [duplicatedProtocol, ...prev]);
    
    // Show success notification
    alert(`Protocol "${protocol.title}" has been duplicated successfully!`);
  };

  const handleExportPDF = (protocol: Protocol) => {
    // Create a simple text representation for demo
    const content = `
Protocol: ${protocol.title}
Description: ${protocol.description}
Category: ${protocol.category}
Version: ${protocol.version}
Author: ${protocol.author}
Estimated Time: ${protocol.estimated_time}

Materials:
${protocol.materials.map(m => `- ${m}`).join('\n')}

${protocol.safety_notes ? `Safety Notes:\n${protocol.safety_notes}\n` : ''}

Steps:
${protocol.steps.map(s => `${s.id}. ${s.title}\n   ${s.description}${s.duration ? ` (${s.duration})` : ''}`).join('\n\n')}
    `.trim();
    
    // Create and download as text file (in a real app, you'd use a PDF library)
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${protocol.title.replace(/\s+/g, '_')}_protocol.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleCopyShareLink = async (protocol: Protocol) => {
    const shareUrl = `${window.location.origin}/protocols?id=${protocol.id}`;
    try {
      await navigator.clipboard.writeText(shareUrl);
      alert('Share link copied to clipboard!');
    } catch (err) {
      // Fallback for browsers that don't support clipboard API
      const textArea = document.createElement('textarea');
      textArea.value = shareUrl;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      alert('Share link copied to clipboard!');
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 sticky top-0 z-40">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center space-x-4">
              <div className="p-2 bg-lab-primary rounded-lg">
                <BookOpen className="w-6 h-6 text-white" />
              </div>
              <div>
                <h1 className="text-xl font-bold text-gray-900">Organized Protocols</h1>
                <p className="text-sm text-gray-500">Manage and share lab protocols</p>
              </div>
            </div>
            
            <button
              onClick={handleCreateProtocol}
              className="btn-primary flex items-center space-x-2"
            >
              <Plus className="w-4 h-4" />
              <span>New Protocol</span>
            </button>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Search and Filters */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 mb-6">
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="flex-1 relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
              <input
                type="text"
                placeholder="Search protocols..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-lab-primary focus:border-transparent"
              />
            </div>
            
            <div className="flex items-center space-x-2">
              <Filter className="w-5 h-5 text-gray-400" />
              <select
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
                className="border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-lab-primary focus:border-transparent"
              >
                {categories.map(category => (
                  <option key={category} value={category}>
                    {category === 'all' ? 'All Categories' : category}
                  </option>
                ))}
              </select>
            </div>
          </div>
        </div>

        {/* Protocol Grid */}
        {loading ? (
          <div className="flex items-center justify-center py-12">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-lab-primary"></div>
          </div>
        ) : filteredProtocols.length === 0 ? (
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-12 text-center">
            <FileText className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">No protocols found</h3>
            <p className="text-gray-500">Try adjusting your search or filters</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredProtocols.map((protocol) => (
              <motion.div
                key={protocol.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="bg-white rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-shadow cursor-pointer"
                onClick={() => setSelectedProtocol(protocol)}
              >
                <div className="p-6">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex-1">
                      <h3 className="text-lg font-semibold text-gray-900 mb-1">
                        {protocol.title}
                      </h3>
                      <p className="text-sm text-gray-600 line-clamp-2">
                        {protocol.description}
                      </p>
                    </div>
                    {getStatusIcon(protocol.status)}
                  </div>

                  <div className="flex items-center space-x-2 mb-3">
                    <span className={`px-2 py-1 text-xs font-medium rounded-full ${getCategoryColor(protocol.category)}`}>
                      {protocol.category}
                    </span>
                    <span className="text-xs text-gray-500">v{protocol.version}</span>
                  </div>

                  <div className="flex flex-wrap gap-1 mb-4">
                    {protocol.tags.slice(0, 3).map((tag) => (
                      <span key={tag} className="px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded">
                        {tag}
                      </span>
                    ))}
                    {protocol.tags.length > 3 && (
                      <span className="px-2 py-1 text-gray-500 text-xs">
                        +{protocol.tags.length - 3} more
                      </span>
                    )}
                  </div>

                  <div className="flex items-center justify-between text-xs text-gray-500">
                    <div className="flex items-center space-x-1">
                      <User className="w-3 h-3" />
                      <span>{protocol.author}</span>
                    </div>
                    <div className="flex items-center space-x-1">
                      <Clock className="w-3 h-3" />
                      <span>{protocol.estimated_time}</span>
                    </div>
                  </div>
                </div>

                <div className="border-t border-gray-200 px-6 py-3 bg-gray-50">
                  <div className="flex items-center justify-between">
                    <span className="text-xs text-gray-500">
                      {protocol.steps.length} steps
                    </span>
                    <div className="flex items-center space-x-2">
                      <button 
                        onClick={(e) => handleShareProtocol(protocol, e)}
                        className="p-1 hover:bg-gray-200 rounded transition-colors"
                        title="Share protocol"
                      >
                        <Share2 className="w-4 h-4 text-gray-600" />
                      </button>
                      <button 
                        onClick={(e) => handleDuplicateProtocol(protocol, e)}
                        className="p-1 hover:bg-gray-200 rounded transition-colors"
                        title="Duplicate protocol"
                      >
                        <Copy className="w-4 h-4 text-gray-600" />
                      </button>
                      <button 
                        onClick={(e) => handleEditProtocol(protocol, e)}
                        className="p-1 hover:bg-gray-200 rounded transition-colors"
                        title="Edit protocol"
                      >
                        <Edit3 className="w-4 h-4 text-gray-600" />
                      </button>
                    </div>
                  </div>
                </div>
              </motion.div>
            ))}
          </div>
        )}

        {/* Protocol Detail Modal */}
        <AnimatePresence>
          {selectedProtocol && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
              <motion.div
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.9 }}
                className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden"
              >
                <div className="sticky top-0 bg-white border-b border-gray-200 p-6 z-10">
                  <div className="flex items-start justify-between">
                    <div>
                      <h2 className="text-2xl font-bold text-gray-900">{selectedProtocol.title}</h2>
                      <p className="text-gray-600 mt-1">{selectedProtocol.description}</p>
                    </div>
                    <button
                      onClick={() => setSelectedProtocol(null)}
                      className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                    >
                      <X className="w-6 h-6 text-gray-500" />
                    </button>
                  </div>
                </div>

                <div className="p-6 overflow-y-auto max-h-[calc(90vh-120px)]">
                  {/* Protocol Metadata */}
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                    <div>
                      <p className="text-xs text-gray-500 uppercase tracking-wide">Category</p>
                      <p className="text-sm font-medium text-gray-900">{selectedProtocol.category}</p>
                    </div>
                    <div>
                      <p className="text-xs text-gray-500 uppercase tracking-wide">Version</p>
                      <p className="text-sm font-medium text-gray-900">{selectedProtocol.version}</p>
                    </div>
                    <div>
                      <p className="text-xs text-gray-500 uppercase tracking-wide">Author</p>
                      <p className="text-sm font-medium text-gray-900">{selectedProtocol.author}</p>
                    </div>
                    <div>
                      <p className="text-xs text-gray-500 uppercase tracking-wide">Est. Time</p>
                      <p className="text-sm font-medium text-gray-900">{selectedProtocol.estimated_time}</p>
                    </div>
                  </div>

                  {/* Materials */}
                  <div className="mb-6">
                    <h3 className="text-lg font-semibold text-gray-900 mb-3">Materials Required</h3>
                    <div className="bg-gray-50 rounded-lg p-4">
                      <ul className="list-disc list-inside space-y-1">
                        {selectedProtocol.materials.map((material, index) => (
                          <li key={index} className="text-sm text-gray-700">{material}</li>
                        ))}
                      </ul>
                    </div>
                  </div>

                  {/* Safety Notes */}
                  {selectedProtocol.safety_notes && (
                    <div className="mb-6">
                      <h3 className="text-lg font-semibold text-gray-900 mb-3">Safety Notes</h3>
                      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                        <p className="text-sm text-yellow-800">{selectedProtocol.safety_notes}</p>
                      </div>
                    </div>
                  )}

                  {/* Protocol Steps - Grouped by Days */}
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900 mb-3">Protocol Steps</h3>
                    <div className="space-y-6">
                      {(() => {
                        // Group steps by day and stage
                        const groupedSteps = selectedProtocol.steps.reduce((acc, step) => {
                          const key = step.stage || `Day ${step.day || 1}`;
                          if (!acc[key]) {
                            acc[key] = [];
                          }
                          acc[key].push(step);
                          return acc;
                        }, {} as Record<string, typeof selectedProtocol.steps>);

                        const sortedGroups = Object.entries(groupedSteps).sort((a, b) => {
                          // Extract day numbers for sorting
                          const getDayNum = (stage: string) => {
                            const match = stage.match(/day\s*(\d+)/i);
                            return match ? parseInt(match[1]) : 999;
                          };
                          return getDayNum(a[0]) - getDayNum(b[0]);
                        });

                        return sortedGroups.map(([stage, steps]) => (
                          <div key={stage} className="border border-gray-300 rounded-lg overflow-hidden">
                            {/* Day/Stage Header */}
                            <div className="bg-gradient-to-r from-lab-primary to-blue-600 px-4 py-3">
                              <div className="flex items-center space-x-3">
                                <div className="w-6 h-6 bg-white/20 rounded-full flex items-center justify-center">
                                  <Calendar className="w-4 h-4 text-white" />
                                </div>
                                <h4 className="font-semibold text-white">{stage}</h4>
                                <span className="text-white/80 text-sm">({steps.length} step{steps.length > 1 ? 's' : ''})</span>
                              </div>
                            </div>
                            
                            {/* Steps within this day/stage */}
                            <div className="bg-white divide-y divide-gray-200">
                              {steps.map((step, index) => (
                                <div key={step.id} className="p-4 hover:bg-gray-50 transition-colors">
                                  <div className="flex items-start space-x-3">
                                    <div className="flex-shrink-0 w-8 h-8 bg-lab-primary text-white rounded-full flex items-center justify-center text-sm font-semibold">
                                      {step.id}
                                    </div>
                                    <div className="flex-1">
                                      <div className="flex items-center space-x-2 mb-2">
                                        <h5 className="font-semibold text-gray-900">{step.title}</h5>
                                        {step.critical && (
                                          <span className="px-2 py-1 bg-red-100 text-red-700 text-xs rounded-full font-medium">
                                            Critical
                                          </span>
                                        )}
                                        {step.duration && (
                                          <span className="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded-full">
                                            {step.duration}
                                          </span>
                                        )}
                                      </div>
                                      <p className="text-sm text-gray-700 leading-relaxed">{step.description}</p>
                                      {step.notes && (
                                        <p className="text-xs text-gray-500 mt-2 italic bg-gray-50 rounded px-2 py-1">Note: {step.notes}</p>
                                      )}
                                    </div>
                                  </div>
                                </div>
                              ))}
                            </div>
                          </div>
                        ));
                      })()
                    )}
                    </div>
                  </div>

                  {/* Actions */}
                  <div className="mt-6 flex items-center justify-end space-x-3">
                    <button 
                      onClick={() => handleExportPDF(selectedProtocol)}
                      className="btn-outline flex items-center space-x-2"
                    >
                      <Download className="w-4 h-4" />
                      <span>Export PDF</span>
                    </button>
                    <button 
                      onClick={() => handleShareProtocol(selectedProtocol)}
                      className="btn-outline flex items-center space-x-2"
                    >
                      <Share2 className="w-4 h-4" />
                      <span>Share</span>
                    </button>
                    <button 
                      onClick={() => handleEditProtocol(selectedProtocol)}
                      className="btn-outline flex items-center space-x-2"
                    >
                      <Edit3 className="w-4 h-4" />
                      <span>Edit</span>
                    </button>
                    <button className="btn-primary flex items-center space-x-2">
                      <ExternalLink className="w-4 h-4" />
                      <span>Use Protocol</span>
                    </button>
                  </div>
                </div>
              </motion.div>
            </div>
          )}
        </AnimatePresence>

        {/* Share Modal */}
        <AnimatePresence>
          {showShareModal && shareProtocol && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
              <motion.div
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.9 }}
                className="bg-white rounded-lg shadow-xl max-w-md w-full"
              >
                <div className="p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-lg font-semibold text-gray-900">Share Protocol</h3>
                    <button
                      onClick={() => setShowShareModal(false)}
                      className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                    >
                      <X className="w-5 h-5 text-gray-500" />
                    </button>
                  </div>
                  
                  <div className="space-y-4">
                    <div>
                      <h4 className="font-medium text-gray-900 mb-2">{shareProtocol.title}</h4>
                      <p className="text-sm text-gray-600">{shareProtocol.description}</p>
                    </div>
                    
                    <div className="bg-gray-50 rounded-lg p-3">
                      <label className="block text-xs font-medium text-gray-700 mb-1">
                        Share Link
                      </label>
                      <div className="flex items-center space-x-2">
                        <input
                          type="text"
                          value={`${window.location.origin}/protocols?id=${shareProtocol.id}`}
                          readOnly
                          className="flex-1 text-xs bg-white border border-gray-300 rounded px-2 py-1"
                        />
                        <button
                          onClick={() => handleCopyShareLink(shareProtocol)}
                          className="px-3 py-1 bg-lab-primary text-white text-xs rounded hover:bg-lab-primary/90 transition-colors"
                        >
                          Copy
                        </button>
                      </div>
                    </div>
                    
                    <div className="flex items-center justify-end space-x-3 pt-4 border-t border-gray-200">
                      <button
                        onClick={() => setShowShareModal(false)}
                        className="px-4 py-2 text-sm text-gray-600 hover:text-gray-800"
                      >
                        Cancel
                      </button>
                      <button
                        onClick={() => {
                          handleCopyShareLink(shareProtocol);
                          setShowShareModal(false);
                        }}
                        className="px-4 py-2 bg-lab-primary text-white text-sm rounded-lg hover:bg-lab-primary/90 transition-colors"
                      >
                        Copy & Close
                      </button>
                    </div>
                  </div>
                </div>
              </motion.div>
            </div>
          )}
        </AnimatePresence>

        {/* Edit/Create Protocol Modal */}
        <AnimatePresence>
          {(showEditModal || showCreateModal) && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
              <motion.div
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.9 }}
                className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden"
              >
                <div className="sticky top-0 bg-white border-b border-gray-200 p-6 z-10">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-xl font-semibold text-gray-900">
                      {isCreating ? 'Create New Protocol' : 'Edit Protocol'}
                    </h3>
                    <button
                      onClick={() => {
                        setShowEditModal(false);
                        setShowCreateModal(false);
                      }}
                      className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                    >
                      <X className="w-6 h-6 text-gray-500" />
                    </button>
                  </div>
                  
                  {/* Tab Navigation - only show for create mode */}
                  {isCreating && (
                    <div className="flex space-x-1 bg-gray-100 p-1 rounded-lg">
                      <button
                        onClick={() => setInputMode('form')}
                        className={`flex-1 px-4 py-2 text-sm font-medium rounded-md transition-colors ${
                          inputMode === 'form'
                            ? 'bg-white text-lab-primary shadow'
                            : 'text-gray-600 hover:text-gray-900'
                        }`}
                      >
                        Structured Form
                      </button>
                      <button
                        onClick={() => setInputMode('text')}
                        className={`flex-1 px-4 py-2 text-sm font-medium rounded-md transition-colors ${
                          inputMode === 'text'
                            ? 'bg-white text-lab-primary shadow'
                            : 'text-gray-600 hover:text-gray-900'
                        }`}
                      >
                        Text Import
                      </button>
                    </div>
                  )}
                </div>
                
                <div className="p-6 overflow-y-auto max-h-[calc(90vh-180px)]">
                  {inputMode === 'text' && isCreating ? (
                    // Text Import Mode
                    <div className="space-y-6">
                      <div>
                        <h4 className="text-lg font-medium text-gray-900 mb-4">Import Protocol from Text</h4>
                        <p className="text-sm text-gray-600 mb-4">
                          Paste any protocol text below - no specific format required! The system uses intelligent parsing to automatically extract and organize all relevant information.
                        </p>
                        
                        <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-4">
                          <h5 className="font-medium text-green-900 mb-2">✨ Smart Auto-Detection:</h5>
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm text-green-800">
                            <div>
                              <div className="font-medium mb-1">Automatically Finds:</div>
                              <ul className="space-y-0.5">
                                <li>• Protocol titles and descriptions</li>
                                <li>• Materials, reagents, equipment</li>
                                <li>• Step-by-step procedures</li>
                                <li>• Safety information</li>
                              </ul>
                            </div>
                            <div>
                              <div className="font-medium mb-1">Smart Recognition:</div>
                              <ul className="space-y-0.5">
                                <li>• Time durations and temperatures</li>
                                <li>• Critical or important steps</li>
                                <li>• Scientific categories</li>
                                <li>• Relevant tags and keywords</li>
                              </ul>
                            </div>
                          </div>
                        </div>
                        
                        <div className="space-y-4">
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">
                              Protocol Text
                            </label>
                            <textarea
                              value={protocolText}
                              onChange={(e) => setProtocolText(e.target.value)}
                              placeholder={`Paste your protocol here - any format works! Here are some examples:

Example 1 (Research Paper Format):
"Cell Transfection Using Lipofectamine 2000. This protocol describes the transfection of mammalian cells using Lipofectamine reagent. Cells should be 70-80% confluent before starting. First, prepare the DNA-lipid complex by mixing 2μg plasmid DNA with 5μl Lipofectamine in serum-free medium. Incubate for 20 minutes at room temperature. Add the mixture to cells and incubate at 37°C. Change medium after 6 hours."

Example 2 (Lab Notebook Style):
"Western Blot - tried new antibody today
Need: protein samples, SDS gel, transfer buffer, PVDF membrane, primary antibody (1:1000), secondary antibody (1:5000)
Started with protein extraction, used RIPA buffer, kept on ice throughout
Ran 12% gel for 90min at 120V - looked good
Transfer took 2hrs at 100V, checked with Ponceau staining
Blocked membrane overnight in milk, then primary antibody incubation"

Example 3 (Protocol Manual Style):  
"PCR Amplification Protocol: Mix 10μl template DNA, 2μl primers, 25μl master mix, 13μl water. Run thermocycler: 95°C 5min, then 35 cycles of 95°C 30sec, 55°C 30sec, 72°C 1min, final extension 72°C 10min. Check results on agarose gel."

The system will automatically organize any of these formats!`}
                              rows={20}
                              className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-lab-primary focus:border-lab-primary font-mono text-sm"
                            />
                          </div>
                          
                          <div className="space-y-3">
                            <div className="text-sm text-gray-500 text-center">
                              {protocolText.length} characters • {protocolText.trim().split('\n').filter(line => line.length > 0).length} lines
                            </div>
                            
                            <div className="flex justify-center">
                              <button
                                onClick={handleTextImport}
                                disabled={!protocolText.trim()}
                                className="group relative px-8 py-3 bg-gradient-to-r from-lab-primary to-blue-600 text-white font-semibold rounded-lg shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 transform hover:scale-105"
                              >
                                <div className="flex items-center space-x-2">
                                  <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                                  </svg>
                                  <span>Parse & Organize Protocol</span>
                                </div>
                                {!protocolText.trim() && (
                                  <div className="absolute -top-2 -right-2 w-4 h-4 bg-red-500 rounded-full animate-pulse"></div>
                                )}
                              </button>
                            </div>
                            
                            {protocolText.trim() && (
                              <div className="text-center">
                                <div className="inline-flex items-center px-3 py-1 rounded-full text-xs bg-green-100 text-green-700">
                                  <svg className="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                    <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                                  </svg>
                                  Ready to parse
                                </div>
                              </div>
                            )}
                            
                            {!protocolText.trim() && (
                              <div className="text-center">
                                <div className="inline-flex items-center px-3 py-1 rounded-full text-xs bg-yellow-100 text-yellow-700">
                                  <svg className="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                    <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                                  </svg>
                                  Paste protocol text above
                                </div>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  ) : (
                    // Structured Form Mode
                    <div className="space-y-6">
                      {/* Basic Information */}
                    <div>
                      <h4 className="text-lg font-medium text-gray-900 mb-4">Basic Information</h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Protocol Title *
                          </label>
                          <input
                            type="text"
                            value={formData.title}
                            onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
                            className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-lab-primary focus:border-lab-primary"
                            placeholder="Enter protocol title"
                          />
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Category
                          </label>
                          <select
                            value={formData.category}
                            onChange={(e) => setFormData(prev => ({ ...prev, category: e.target.value as any }))}
                            className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-lab-primary focus:border-lab-primary"
                          >
                            <option value="Cell Culture">Cell Culture</option>
                            <option value="Molecular Biology">Molecular Biology</option>
                            <option value="Protein Analysis">Protein Analysis</option>
                            <option value="NGS">NGS</option>
                            <option value="General">General</option>
                          </select>
                        </div>
                        
                        <div className="md:col-span-2">
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Description
                          </label>
                          <textarea
                            value={formData.description}
                            onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                            rows={3}
                            className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-lab-primary focus:border-lab-primary"
                            placeholder="Describe the protocol purpose and overview"
                          />
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Estimated Time
                          </label>
                          <input
                            type="text"
                            value={formData.estimated_time}
                            onChange={(e) => setFormData(prev => ({ ...prev, estimated_time: e.target.value }))}
                            className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-lab-primary focus:border-lab-primary"
                            placeholder="e.g., 2 hours, 3 days"
                          />
                        </div>
                      </div>
                    </div>

                    {/* Tags */}
                    <div>
                      <h4 className="text-lg font-medium text-gray-900 mb-4">Tags</h4>
                      <div className="flex flex-wrap gap-2 mb-3">
                        {formData.tags.map((tag) => (
                          <span
                            key={tag}
                            className="px-3 py-1 bg-lab-primary text-white text-sm rounded-full flex items-center space-x-1"
                          >
                            <span>{tag}</span>
                            <button
                              onClick={() => removeTag(tag)}
                              className="hover:bg-lab-primary/80 rounded-full p-0.5"
                            >
                              <X className="w-3 h-3" />
                            </button>
                          </span>
                        ))}
                      </div>
                      <div className="flex items-center space-x-2">
                        <input
                          type="text"
                          value={newTag}
                          onChange={(e) => setNewTag(e.target.value)}
                          onKeyPress={(e) => e.key === 'Enter' && addTag()}
                          className="flex-1 border border-gray-300 rounded-md px-3 py-2 focus:ring-lab-primary focus:border-lab-primary"
                          placeholder="Add a tag and press Enter"
                        />
                        <button
                          onClick={addTag}
                          className="px-4 py-2 bg-lab-primary text-white rounded-md hover:bg-lab-primary/90 transition-colors"
                        >
                          Add
                        </button>
                      </div>
                    </div>

                    {/* Materials */}
                    <div>
                      <h4 className="text-lg font-medium text-gray-900 mb-4">Materials Required</h4>
                      <div className="space-y-2">
                        {formData.materials.map((material, index) => (
                          <div key={index} className="flex items-center space-x-2">
                            <input
                              type="text"
                              value={material}
                              onChange={(e) => updateMaterial(index, e.target.value)}
                              className="flex-1 border border-gray-300 rounded-md px-3 py-2 focus:ring-lab-primary focus:border-lab-primary"
                              placeholder="Enter material or reagent"
                            />
                            {formData.materials.length > 1 && (
                              <button
                                onClick={() => removeMaterial(index)}
                                className="p-2 text-red-600 hover:bg-red-50 rounded transition-colors"
                              >
                                <Trash2 className="w-4 h-4" />
                              </button>
                            )}
                          </div>
                        ))}
                        <button
                          onClick={addMaterial}
                          className="flex items-center space-x-2 text-lab-primary hover:text-lab-primary/80"
                        >
                          <Plus className="w-4 h-4" />
                          <span>Add Material</span>
                        </button>
                      </div>
                    </div>

                    {/* Safety Notes */}
                    <div>
                      <h4 className="text-lg font-medium text-gray-900 mb-4">Safety Notes</h4>
                      <textarea
                        value={formData.safety_notes}
                        onChange={(e) => setFormData(prev => ({ ...prev, safety_notes: e.target.value }))}
                        rows={3}
                        className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-lab-primary focus:border-lab-primary"
                        placeholder="Important safety considerations and warnings"
                      />
                    </div>

                    {/* Protocol Steps */}
                    <div>
                      <h4 className="text-lg font-medium text-gray-900 mb-4">Protocol Steps</h4>
                      <div className="space-y-6">
                        {(() => {
                          // Group form steps by day and stage for better organization
                          const groupedSteps = formData.steps.reduce((acc, step) => {
                            const key = step.stage || `Day ${step.day || 1}`;
                            if (!acc[key]) {
                              acc[key] = [];
                            }
                            acc[key].push(step);
                            return acc;
                          }, {} as Record<string, typeof formData.steps>);

                          const sortedGroups = Object.entries(groupedSteps).sort((a, b) => {
                            const getDayNum = (stage: string) => {
                              const match = stage.match(/day\s*(\d+)/i);
                              return match ? parseInt(match[1]) : 999;
                            };
                            return getDayNum(a[0]) - getDayNum(b[0]);
                          });

                          return sortedGroups.map(([stage, steps]) => (
                            <div key={stage} className="border border-gray-300 rounded-lg overflow-hidden">
                              {/* Day/Stage Header */}
                              <div className="bg-gradient-to-r from-gray-100 to-gray-200 px-4 py-2 border-b">
                                <div className="flex items-center justify-between">
                                  <div className="flex items-center space-x-2">
                                    <Calendar className="w-4 h-4 text-gray-600" />
                                    <h5 className="font-semibold text-gray-900">{stage}</h5>
                                    <span className="text-gray-600 text-sm">({steps.length} step{steps.length > 1 ? 's' : ''})</span>
                                  </div>
                                </div>
                              </div>
                              
                              {/* Steps within this day/stage */}
                              <div className="bg-white divide-y divide-gray-100">
                                {steps.map((step) => (
                                  <div key={step.id} className="p-4">
                                    <div className="flex items-center justify-between mb-3">
                                      <span className="font-medium text-gray-900">Step {step.id}</span>
                                      {formData.steps.length > 1 && (
                                        <button
                                          onClick={() => removeStep(step.id)}
                                          className="p-1 text-red-600 hover:bg-red-50 rounded transition-colors"
                                        >
                                          <Trash2 className="w-4 h-4" />
                                        </button>
                                      )}
                                    </div>
                                    
                                    <div className="grid grid-cols-1 md:grid-cols-3 gap-3 mb-3">
                                      <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-1">
                                          Step Title *
                                        </label>
                                        <input
                                          type="text"
                                          value={step.title}
                                          onChange={(e) => updateStep(step.id, 'title', e.target.value)}
                                          className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-lab-primary focus:border-lab-primary"
                                          placeholder="Step title"
                                        />
                                      </div>
                                      
                                      <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-1">
                                          Duration
                                        </label>
                                        <input
                                          type="text"
                                          value={step.duration}
                                          onChange={(e) => updateStep(step.id, 'duration', e.target.value)}
                                          className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-lab-primary focus:border-lab-primary"
                                          placeholder="e.g., 30 minutes"
                                        />
                                      </div>
                                      
                                      <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-1">
                                          Day
                                        </label>
                                        <input
                                          type="number"
                                          min="1"
                                          value={step.day || 1}
                                          onChange={(e) => {
                                            const day = parseInt(e.target.value) || 1;
                                            updateStep(step.id, 'day', day);
                                            updateStep(step.id, 'stage', `Day ${day}`);
                                          }}
                                          className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-lab-primary focus:border-lab-primary"
                                          placeholder="1"
                                        />
                                      </div>
                                    </div>
                                    
                                    <div className="mb-3">
                                      <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Stage Description
                                      </label>
                                      <input
                                        type="text"
                                        value={step.stage || ''}
                                        onChange={(e) => updateStep(step.id, 'stage', e.target.value)}
                                        className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-lab-primary focus:border-lab-primary"
                                        placeholder="e.g., Day 1 - Preparation, Day 2 - Treatment"
                                      />
                                    </div>
                                    
                                    <div className="mb-3">
                                      <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Description *
                                      </label>
                                      <textarea
                                        value={step.description}
                                        onChange={(e) => updateStep(step.id, 'description', e.target.value)}
                                        rows={2}
                                        className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-lab-primary focus:border-lab-primary"
                                        placeholder="Detailed step instructions"
                                      />
                                    </div>
                                    
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                                      <div>
                                        <label className="block text-sm font-medium text-gray-700 mb-1">
                                          Notes
                                        </label>
                                        <input
                                          type="text"
                                          value={step.notes}
                                          onChange={(e) => updateStep(step.id, 'notes', e.target.value)}
                                          className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-lab-primary focus:border-lab-primary"
                                          placeholder="Additional notes"
                                        />
                                      </div>
                                      
                                      <div className="flex items-center space-x-3 pt-6">
                                        <label className="flex items-center space-x-2">
                                          <input
                                            type="checkbox"
                                            checked={step.critical}
                                            onChange={(e) => updateStep(step.id, 'critical', e.target.checked)}
                                            className="rounded border-gray-300 text-lab-primary focus:ring-lab-primary"
                                          />
                                          <span className="text-sm text-gray-700">Critical Step</span>
                                        </label>
                                      </div>
                                    </div>
                                  </div>
                                ))}
                              </div>
                            </div>
                          ));
                        })()
                        }
                        
                        <div className="flex items-center justify-between pt-4 border-t border-gray-200">
                          <button
                            onClick={addStep}
                            className="flex items-center space-x-2 text-lab-primary hover:text-lab-primary/80 font-medium"
                          >
                            <Plus className="w-4 h-4" />
                            <span>Add Step</span>
                          </button>
                          
                          <div className="text-sm text-gray-500">
                            Total: {formData.steps.length} steps across {Object.keys(formData.steps.reduce((acc, step) => {
                              const key = step.stage || `Day ${step.day || 1}`;
                              acc[key] = true;
                              return acc;
                            }, {} as Record<string, boolean>)).length} day{Object.keys(formData.steps.reduce((acc, step) => {
                              const key = step.stage || `Day ${step.day || 1}`;
                              acc[key] = true;
                              return acc;
                            }, {} as Record<string, boolean>)).length > 1 ? 's' : ''}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  )}
                </div>

                {/* Modal Footer */}
                <div className="sticky bottom-0 bg-white border-t border-gray-200 p-6">
                  <div className="flex items-center justify-end space-x-3">
                    <button
                      onClick={() => {
                        setShowEditModal(false);
                        setShowCreateModal(false);
                      }}
                      className="px-4 py-2 text-sm text-gray-600 hover:text-gray-800"
                    >
                      Cancel
                    </button>
                    <button
                      onClick={handleSaveProtocol}
                      className="px-6 py-2 bg-lab-primary text-white text-sm rounded-lg hover:bg-lab-primary/90 transition-colors"
                    >
                      {isCreating ? 'Create Protocol' : 'Save Changes'}
                    </button>
                  </div>
                </div>
              </motion.div>
            </div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
}