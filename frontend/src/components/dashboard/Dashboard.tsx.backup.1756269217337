'use client';

import React, { useState } from 'react';
import { Card, CardContent, Button } from '../ui';

interface Project {
  id: string;
  title: string;
  status: 'active' | 'completed' | 'in_progress';
  hypothesis: string;
  purpose: string;
  futureplan: string;
  notes: number;
  members: number;
  progress: number;
  updated: string;
}

export const Dashboard: React.FC = () => {
  const [activeTab, setActiveTab] = useState<'lab_notes' | 'projects' | 'processing'>('projects');
  const [selectedProject, setSelectedProject] = useState('All Projects');
  const [searchQuery, setSearchQuery] = useState('');

  // Handler functions for various actions
  const handleToolboxClick = () => {
    // Get auth token from localStorage
    const authToken = localStorage.getItem('authToken') || localStorage.getItem('auth_token');
    
    if (!authToken) {
      alert('Please log in to use the toolbox.');
      return;
    }

    // Trigger MiSeq/FastQ analysis
    fetch('http://localhost:5005/api/toolbox/miseq', {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${authToken}`
      },
      body: JSON.stringify({ action: 'open_miseq_analyzer' })
    }).then(response => {
      if (response.ok) {
        return response.json();
      } else {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
    }).then(data => {
      alert(data.message || 'MiSeq FastQ Analyzer launched! Check your system for the analysis GUI.');
    }).catch(err => {
      console.error('Toolbox error:', err);
      alert('Error launching toolbox. Please check that the backend server is running.');
    });
  };

  const handleUploadClick = () => {
    window.location.href = '/upload';
  };

  const handleProjectEdit = (projectId: string) => {
    window.location.href = `/projects/${projectId}/edit`;
  };

  const handleProjectDelete = (projectId: string) => {
    if (confirm('Are you sure you want to delete this project? This action cannot be undone.')) {
      // Call delete API
      fetch(`http://localhost:5005/api/projects/${projectId}`, {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' }
      }).then(response => {
        if (response.ok) {
          alert('Project deleted successfully');
          window.location.reload();
        } else {
          alert('Failed to delete project');
        }
      }).catch(err => {
        console.error('Delete error:', err);
        alert('Error deleting project');
      });
    }
  };

  const handleViewNotes = (projectId: string) => {
    window.location.href = `/projects/${projectId}/notes`;
  };

  const handleAddCollaborator = (projectId: string) => {
    const email = prompt('Enter collaborator email:');
    if (email) {
      fetch(`http://localhost:5005/api/projects/${projectId}/collaborators`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email })
      }).then(response => {
        if (response.ok) {
          alert('Collaborator added successfully');
          window.location.reload();
        } else {
          alert('Failed to add collaborator');
        }
      }).catch(err => {
        console.error('Collaborator error:', err);
        alert('Error adding collaborator');
      });
    }
  };

  const handleTotalNotesClick = () => {
    setActiveTab('lab_notes');
  };

  const handleProjectsClick = () => {
    setActiveTab('projects');
  };

  const handleProcessingClick = () => {
    setActiveTab('processing');
  };

  const handleFuturePlanClick = () => {
    window.location.href = '/projects?view=future-plans';
  };

  // Real projects from database
  const projects: Project[] = [
    {
      id: 'CF1282',
      title: 'CF1282',
      status: 'active',
      hypothesis: 'We hypothesize that prime editing delivered via optimized LNPs can efficiently and precisely correct the CFTR W1282X mutation in patient-derived airway epithelial cells, restoring functional CFTR protein expression and chloride transport, with minimal off-target effects.',
      purpose: 'Develop a targeted gene editing therapy for the CFTR W1282X mutation using prime editing. Demonstrate the feasibility of LNP-mediated delivery of PE components to AECs. Validate functional restoration of CFTR in a patient-derived cell model, providing proof-of-concept for a novel CF therapy.',
      futureplan: 'Next experimental phases for APOC3 knockout development: 1. **Model Validation**: Complete characterization of transgenic mouse atherosclerosis model baseline parameters. Establish metabolic and cardiovascular phenotyping protocols. 2. **Base Editor Optimization**: Test different base editor variants (BE4max, AID/APOBEC) for efficiency at the APOC3 locus.',
      notes: 0,
      members: 1,
      progress: 0,
      updated: 'Updated Jul 31, 2025, 01:24 AM'
    },
    {
      id: 'MizCGBE',
      title: 'MizCGBE',
      status: 'active',
      hypothesis: '',
      purpose: 'Develop of a safer gene editor tool for C-G conversion',
      futureplan: 'Based on the current experimental progress, the next steps should focus on: 1. **Optimization Phase**: Refine the current CRISPR delivery protocols and validate efficiency metrics across different cell lines. 2. **Validation Studies**: Conduct comprehensive off-target analysis and establish safety profiles.',
      notes: 2,
      members: 2,
      progress: 50,
      updated: 'Updated Jul 31, 2025, 01:23 AM'
    },
    {
      id: 'APOC3',
      title: 'APOC3',
      status: 'active',
      hypothesis: '',
      purpose: 'This project aims to develop a base editor-mediated gene knockout strategy targeting the human APOC3 gene in a transgenic mouse model of atherosclerosis to evaluate its potential as a therapeutic approach for reducing cardiovascular disease (CVD) risk.',
      futureplan: 'CFTR W1282X prime editing therapy development roadmap: 1. **Prime Editing System Refinement**: Optimize PE3 system for CFTR locus. Test different guide RNA designs and RT template lengths for maximum correction efficiency. 2. **Airway Cell Model Validation**: Establish robust differentiated airway epithelial cell cultures from patient-derived iPSCs.',
      notes: 0,
      members: 4,
      progress: 0,
      updated: 'Updated Jul 30, 2025, 07:49 PM'
    }
  ];

  const recentProjects = [
    { name: 'CF1282', notes: 0 },
    { name: 'MizCGBE', notes: 2 },
    { name: 'APOC3', notes: 0 }
  ];

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {/* Top Stats Cards - 6 cards in 2 rows */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        {/* Row 1 */}
        <div 
          className="bg-white p-6 rounded-lg shadow-sm border hover:shadow-md transition-shadow cursor-pointer"
          onClick={handleTotalNotesClick}
        >
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600 mb-1">Total Notes</p>
              <p className="text-3xl font-bold text-gray-900">2</p>
            </div>
            <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
              <svg className="w-6 h-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
            </div>
          </div>
        </div>

        <div 
          className="bg-white p-6 rounded-lg shadow-sm border hover:shadow-md transition-shadow cursor-pointer"
          onClick={handleProjectsClick}
        >
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600 mb-1">Projects</p>
              <p className="text-3xl font-bold text-gray-900">3</p>
            </div>
            <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
              <svg className="w-6 h-6 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
              </svg>
            </div>
          </div>
        </div>

        <div 
          className="bg-white p-6 rounded-lg shadow-sm border hover:shadow-md transition-shadow cursor-pointer"
          onClick={handleProcessingClick}
        >
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600 mb-1">Processing</p>
              <p className="text-3xl font-bold text-gray-900">0</p>
            </div>
            <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
              <svg className="w-6 h-6 text-purple-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
              </svg>
            </div>
          </div>
        </div>

        <div 
          className="bg-white p-6 rounded-lg shadow-sm border hover:shadow-md transition-shadow cursor-pointer"
          onClick={handleUploadClick}
        >
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600 mb-1">Upload New</p>
              <p className="text-sm text-gray-500">Click to upload</p>
            </div>
            <div className="w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center">
              <svg className="w-6 h-6 text-orange-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
              </svg>
            </div>
          </div>
        </div>

        {/* Row 2 */}
        <div 
          className="bg-white p-6 rounded-lg shadow-sm border hover:shadow-md transition-shadow cursor-pointer"
          onClick={handleToolboxClick}
        >
          <div>
            <p className="text-sm text-gray-600 mb-2">Toolbox</p>
            <p className="text-sm text-gray-500">Analyze FastQ/MiSeq data</p>
            <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mt-3">
              <svg className="w-6 h-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 0V5a2 2 0 012-2h2a2 2 0 002-2" />
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
          </div>
        </div>

        <div 
          className="bg-white p-6 rounded-lg shadow-sm border hover:shadow-md transition-shadow cursor-pointer"
          onClick={handleFuturePlanClick}
        >
          <div>
            <p className="text-sm text-gray-600 mb-2">Future Plan</p>
            <p className="text-sm text-gray-500">Manage project plans</p>
            <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mt-3">
              <svg className="w-6 h-6 text-purple-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" />
              </svg>
            </div>
          </div>
        </div>
      </div>

      {/* Search and Filter Bar */}
      <div className="mb-6">
        <div className="flex items-center gap-4 mb-4">
          <div className="flex-1 relative">
            <svg className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
            <input
              type="text"
              placeholder="Search lab notes, experiments, observations..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          <Button variant="outline" className="px-4 py-2">
            <svg className="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.707A1 1 0 013 7V4z" />
            </svg>
            Filters
          </Button>
          <Button className="px-4 py-2">
            Search
          </Button>
        </div>

        {/* Tabs */}
        <div className="flex space-x-8 border-b border-gray-200">
          <button
            onClick={() => setActiveTab('lab_notes')}
            className={`pb-2 px-1 relative ${
              activeTab === 'lab_notes' 
                ? 'text-blue-600 border-b-2 border-blue-600' 
                : 'text-gray-500 hover:text-gray-700'
            }`}
          >
            <svg className="w-4 h-4 inline mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            Lab Notes
          </button>
          <button
            onClick={() => setActiveTab('projects')}
            className={`pb-2 px-1 relative ${
              activeTab === 'projects' 
                ? 'text-blue-600 border-b-2 border-blue-600' 
                : 'text-gray-500 hover:text-gray-700'
            }`}
          >
            <svg className="w-4 h-4 inline mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
            </svg>
            Projects
          </button>
          <button
            onClick={() => setActiveTab('processing')}
            className={`pb-2 px-1 relative ${
              activeTab === 'processing' 
                ? 'text-blue-600 border-b-2 border-blue-600' 
                : 'text-gray-500 hover:text-gray-700'
            }`}
          >
            <svg className="w-4 h-4 inline mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
            </svg>
            Processing Jobs
          </button>
        </div>
      </div>

      {/* Main Content - Projects Grid with Sidebar */}
      <div className="flex gap-6">
        {/* Sidebar */}
        <div className="w-80 space-y-6">
          {/* Quick Filters */}
          <Card className="p-4">
            <h3 className="font-medium text-gray-900 mb-4">Quick Filters</h3>
            <div className="space-y-3">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Project</label>
                <select 
                  value={selectedProject} 
                  onChange={(e) => setSelectedProject(e.target.value)}
                  className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option>All Projects</option>
                  <option>CF1282</option>
                  <option>MizCGBE</option>
                  <option>APOC3</option>
                </select>
              </div>
            </div>
          </Card>

          {/* Recent Projects */}
          <Card className="p-4">
            <h3 className="font-medium text-gray-900 mb-4">Recent Projects</h3>
            <div className="space-y-3">
              {recentProjects.map((project) => (
                <div key={project.name} className="flex items-center justify-between">
                  <span className="text-sm text-gray-900">{project.name}</span>
                  <span className="text-xs text-gray-500">{project.notes} notes</span>
                </div>
              ))}
            </div>
          </Card>
        </div>

        {/* Projects Grid */}
        <div className="flex-1">
          {activeTab === 'projects' && (
            <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
              {projects.map((project) => (
                <Card key={project.id} className="p-6 hover:shadow-lg transition-shadow cursor-pointer">
                  <div className="mb-4">
                    <div className="flex items-center justify-between mb-2">
                      <h3 className="text-lg font-semibold text-gray-900">{project.title}</h3>
                      <span className="px-2 py-1 text-xs bg-green-100 text-green-800 rounded-full">
                        {project.status}
                      </span>
                    </div>
                    <p className="text-sm text-gray-600 mb-4">
                      {project.purpose || 'Fix complete test'}
                    </p>
                  </div>

                  {project.hypothesis && (
                    <div className="mb-4">
                      <h4 className="text-xs font-medium text-gray-500 uppercase tracking-wide mb-1">HYPOTHESIS</h4>
                      <p className="text-sm text-gray-700 line-clamp-2">{project.hypothesis}</p>
                    </div>
                  )}

                  {project.purpose && (
                    <div className="mb-4">
                      <h4 className="text-xs font-medium text-gray-500 uppercase tracking-wide mb-1">PURPOSE</h4>
                      <p className="text-sm text-gray-700 line-clamp-2">{project.purpose}</p>
                    </div>
                  )}

                  {project.futureplan && (
                    <div className="mb-4">
                      <h4 className="text-xs font-medium text-gray-500 uppercase tracking-wide mb-1">FUTURE PLAN</h4>
                      <p className="text-sm text-gray-700 line-clamp-2">{project.futureplan}</p>
                    </div>
                  )}

                  <div className="flex items-center justify-between text-sm text-gray-500 mb-4">
                    <div className="flex items-center space-x-4">
                      <span>{project.notes} notes</span>
                      <span>{project.members} members</span>
                    </div>
                    <span className="text-xs">{project.updated}</span>
                  </div>

                  <div className="mb-4">
                    <div className="flex items-center justify-between text-xs text-gray-500 mb-1">
                      <span>Progress</span>
                      <button className="text-blue-600 hover:text-blue-800">Edit</button>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div 
                        className="bg-orange-400 h-2 rounded-full transition-all" 
                        style={{ width: `${project.progress}%` }}
                      ></div>
                    </div>
                    <div className="flex items-center justify-between text-xs text-gray-500 mt-1">
                      <span>{project.progress}%</span>
                      <span>→ In Progress</span>
                    </div>
                  </div>

                  <div className="flex items-center justify-between">
                    <button 
                      className="text-blue-600 hover:text-blue-800 text-sm font-medium"
                      onClick={() => handleViewNotes(project.id)}
                    >
                      View Notes
                    </button>
                    <div className="flex space-x-2">
                      <button 
                        className="p-1 text-gray-400 hover:text-gray-600" 
                        title="Share"
                        onClick={() => navigator.clipboard.writeText(`${window.location.origin}/projects/${project.id}`)}
                      >
                        <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
                        </svg>
                      </button>
                      <button 
                        className="p-1 text-gray-400 hover:text-gray-600" 
                        title="Add Collaborator"
                        onClick={() => handleAddCollaborator(project.id)}
                      >
                        <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                        </svg>
                      </button>
                      <button 
                        className="p-1 text-gray-400 hover:text-gray-600" 
                        title="Edit Project"
                        onClick={() => handleProjectEdit(project.id)}
                      >
                        <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                        </svg>
                      </button>
                      <button 
                        className="p-1 text-gray-400 hover:text-red-600" 
                        title="Delete Project"
                        onClick={() => handleProjectDelete(project.id)}
                      >
                        <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                      </button>
                    </div>
                  </div>
                </Card>
              ))}
            </div>
          )}

          {activeTab === 'lab_notes' && (
            <div className="text-center py-12">
              <svg className="h-12 w-12 text-gray-400 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              <h3 className="text-lg font-medium text-gray-900 mb-2">No lab notes yet</h3>
              <p className="text-gray-600">Upload your first lab note to get started.</p>
            </div>
          )}

          {activeTab === 'processing' && (
            <div className="text-center py-12">
              <svg className="h-12 w-12 text-gray-400 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
              </svg>
              <h3 className="text-lg font-medium text-gray-900 mb-2">No processing jobs</h3>
              <p className="text-gray-600">Your processed files will appear here.</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};